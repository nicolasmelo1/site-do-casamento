import {
  Generated,
  ColumnType,
  CamelCasePlugin,
  Kysely,
  PostgresDialect,
} from "kysely";
import { NeonDialect } from "kysely-neon";
import { createKysely } from "@vercel/postgres-kysely";
import { Pool } from "pg";
import { neonConfig } from "@neondatabase/serverless";

interface Guests {
  // Columns that are generated by the database should be marked
  // using the `Generated` type. This way they are automatically
  // made optional in inserts and updates.
  id: Generated<number>;
  name: string;
  cpfCnpj?: string;
  email?: string;
  phone?: string;
  instagramUserId?: string;
  // You can specify a different type for each operation (select, insert and
  // update) using the `ColumnType<SelectType, InsertType, UpdateType>`
  // wrapper. Here we define a column `createdAt` that is selected as
  // a `Date`, can optionally be provided as a `string` in inserts and
  // can never be updated:
  createdAt: ColumnType<Date, string | undefined, never>;
}

// Keys of this interface are table names.
export interface Database {
  guests: Guests;
}

// if we're running locally
if (!process.env.VERCEL_ENV) {
  // Set the WebSocket proxy to work with the local instance
  neonConfig.wsProxy = (host) => `${host}:5433/v1`;
  // Disable all authentication and encryption
  neonConfig.useSecureWebSocket = false;
  neonConfig.pipelineTLS = false;
  neonConfig.pipelineConnect = false;
}

if (!process.env.POSTGRES_URL) {
  throw new Error("POSTGRES_URL is not set");
}

function getKyselyInstance() {
  if (process.env.NODE_ENV === "development") {
    return new Kysely<Database>({
      dialect: new PostgresDialect({
        pool: new Pool({
          connectionString: process.env.POSTGRES_URL,
        }),
      }),
      plugins: [new CamelCasePlugin()],
    });
  } else {
    return createKysely<Database>(
      {
        connectionString: process.env.POSTGRES_URL,
      },
      {
        plugins: [new CamelCasePlugin()],
      }
    );
  }
}

export const db = getKyselyInstance();
export { sql } from "kysely";
